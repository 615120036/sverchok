{
  "export_version": "0.079",
  "framed_nodes": {
    "Combinatorics": "Frame.002",
    "Convex Hull": "Frame.002",
    "IcoSphere": "Frame",
    "List Join": "Frame.002",
    "List Length": "Frame.002",
    "Move": "Frame",
    "Move.001": "Frame",
    "Number Range": "Frame.002",
    "Random Vector MK2": "Frame",
    "Scripted Node Lite.001": "Frame.001",
    "Socket Converter": "Frame.001",
    "Stethoscope MK2": "Frame.001",
    "Stethoscope MK2.001": "Frame.002",
    "Stethoscope MK2.002": "Frame.002",
    "Vector in": "Frame",
    "Viewer Draw Mk3": "Frame.002",
    "Viewer Draw Mk3.001": "Frame.001",
    "Viewer Draw Mk3.002": "Frame.001",
    "Viewer Draw Mk3.003": "Frame.002",
    "Volume": "Frame.002",
    "Volume.001": "Frame.002"
  },
  "groups": {},
  "nodes": {
    "Combinatorics": {
      "bl_idname": "SvCombinatoricsNode",
      "height": 100.0,
      "hide": false,
      "label": "Combinations",
      "location": [
        677.5,
        601.3173828125
      ],
      "params": {
        "length": 2,
        "operation": "COMBINATIONS",
        "repeat": 1
      },
      "width": 140.0
    },
    "Convex Hull": {
      "bl_idname": "SvConvexHullNodeMK2",
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        79.5,
        820.736328125
      ],
      "params": {},
      "width": 140.0
    },
    "Frame": {
      "bl_idname": "NodeFrame",
      "color": [
        0.1581861972808838,
        0.6079999804496765,
        0.1858440488576889
      ],
      "height": 490.5946044921875,
      "hide": false,
      "label": "INPUTS",
      "location": [
        -30.0,
        71.85829162597656
      ],
      "params": {},
      "use_custom_color": true,
      "width": 499.0
    },
    "Frame.001": {
      "bl_idname": "NodeFrame",
      "color": [
        0.6079999804496765,
        0.29834824800491333,
        0.17616866528987885
      ],
      "height": 856.9512939453125,
      "hide": false,
      "label": "GENETIC ALGORYTHM PROCESS",
      "location": [
        -30.0,
        10.0
      ],
      "params": {},
      "use_custom_color": true,
      "width": 503.49774169921875
    },
    "Frame.002": {
      "bl_idname": "NodeFrame",
      "color": [
        0.15239807963371277,
        0.4163794219493866,
        0.6079999804496765
      ],
      "height": 1001.230224609375,
      "hide": false,
      "label": "OUTPUT",
      "location": [
        -30.0,
        10.0
      ],
      "params": {},
      "use_custom_color": true,
      "width": 1105.0301513671875
    },
    "IcoSphere": {
      "bl_idname": "SvIcosphereNode",
      "color": [
        0.9200000166893005,
        0.9200000166893005,
        0.9200000166893005
      ],
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -1116.5,
        882.5946197509766
      ],
      "params": {
        "radius": 2.0,
        "subdivisions": 0
      },
      "use_custom_color": true,
      "width": 140.0
    },
    "List Join": {
      "bl_idname": "ListJoinNode",
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        677.5,
        820.736328125
      ],
      "params": {},
      "width": 140.0
    },
    "List Length": {
      "bl_idname": "ListLengthNode",
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        79.5,
        607.3173828125
      ],
      "params": {},
      "width": 140.0
    },
    "Move": {
      "bl_idname": "SvMoveNodeMk3",
      "custom_socket_props": {
        "1": {
          "expanded": true
        }
      },
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -817.5,
        743.1756744384766
      ],
      "params": {},
      "width": 133.2548828125
    },
    "Move.001": {
      "bl_idname": "SvMoveNodeMk3",
      "custom_socket_props": {
        "1": {
          "expanded": true
        }
      },
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -817.5,
        882.5946197509766
      ],
      "params": {},
      "width": 140.0
    },
    "Note": {
      "bl_idname": "NoteNode",
      "color": [
        0.0203790795058012,
        0.018774831667542458,
        0.019970668479800224
      ],
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -1149.3834228515625,
        1071.297119140625
      ],
      "params": {
        "text": "Nikitron 2020 - genetic algorythm attempt. Moving data set points to fit pattern. turn off processing and use ctrl+F5 to run once."
      },
      "use_custom_color": true,
      "width": 509.6258544921875
    },
    "Number Range": {
      "bl_idname": "SvGenNumberRange",
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        378.5,
        565.4130859375
      ],
      "params": {
        "count_": 5,
        "number_mode": "int",
        "range_mode": "RANGE_STEP",
        "stop_float": 4.0
      },
      "width": 140.0
    },
    "Random Vector MK2": {
      "bl_idname": "RandomVectorNodeMK2",
      "color": [
        0.9200000166893005,
        0.9200000166893005,
        0.9200000166893005
      ],
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -1116.5,
        571.2714080810547
      ],
      "params": {
        "count_inner": 12,
        "scale": 2.0,
        "seed": 0
      },
      "use_custom_color": true,
      "width": 140.0
    },
    "Scripted Node Lite.001": {
      "bl_idname": "SvScriptNodeLite",
      "color": [
        0.0,
        0.800000011920929,
        0.949999988079071
      ],
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -518.5,
        820.736328125
      ],
      "params": {
        "float_list": [
          0.0,
          0.0,
          0.0,
          0.0,
          0.9950000047683716,
          0.10000000149011612,
          0.07999999821186066,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0
        ],
        "halt_updates": 0,
        "inject_params": 0,
        "injected_state": 0,
        "int_list": [
          0,
          0,
          20,
          2000,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        "script_name": "GA_lists_match.py",
        "script_str": "# taken from https://github.com/nortikin/simple-ga\n# making comparement between vertices and choose best match\n\nimport random\nfrom functools import reduce\nfrom statistics import mean, variance\n\n\n\"\"\"\nin  pattern s   d=[] n=0\nin  data    s   d=[] n=0\nin  population s d=20 n=2\nin  generations s d=10000 n=2\nin  threshold s d=0.9 n=2\nin  mutator s d=0.1 n=2\nin  selector s d=0.2 n=2\nin  all_apart s d=0 n=2\nout combination  s\n\"\"\"\n\n\nclass Agent:\n\n    def __init__(self, length):\n\n        self.string = [random.choice(data[0]) for _ in range(length)]\n        # self.string = ''.join(random.choice(data[0]) for _ in xrange(length))\n        self.fitness = -1\n\n    def __str__(self):\n\n        return 'String: ' + str(self.string) + ' Fitness: ' + str(self.fitness)\n\n\n\ndef compare_two_lists(agent_list,pattern):\n    \"\"\" fitness descision module \"\"\"\n    lenpat = len(pattern)\n    Ratio = []\n    for i in range(len(agent_list)):\n        j = i%lenpat\n        subpat = pattern[j]           \n        subagl = agent_list[i]\n        # main descision part here, so we assign \n        # coef to all or to separate and summ\n        if all_apart == 0:\n            # full match\n            coef = [1 if x in subpat else 0 for x in subagl]\n        elif all_apart == 1:\n            # closest\n            mainfunc = lambda y, x: (all_dif-abs(y-x))/all_dif\n            #mainfunc = lambda y, x: abs((y-x)/all_dif) if y>x else abs((x-y)/all_dif)\n            coef = list(map(mainfunc, subagl, subpat))\n        else:\n            coef = [1 if x in subpat else 0 for x in subagl]\n        Ratio.append(mean(coef))\n    Ratio = mean(Ratio)\n    print (Ratio)\n    return Ratio\n\n\ndef ga():\n\n    agents = init_agents(population, in_str_len)\n\n    for generation in range(generations):\n\n        #print ('Generation: ' + str(generation))\n\n        agents = fitness(agents)\n        agents = selection(agents)\n        agents = crossover(agents)\n        agents = mutation(agents)\n\n        if any(agent.fitness >= threshold for agent in agents):\n\n            print (f'Last generation #{str(generation)}')\n            agent = sorted(agents, key=lambda agent: agent.fitness, reverse=True)[0]\n            print (f'GA ended with {type(agent.string)} {len(agent.string)}, \\\n                     \\n{agent.string[:3]}... \\\n                     \\nFitness: {agent.fitness}')\n            return agent.string\n    return [None]\n    \n\n\ndef init_agents(population, length):\n\n    return [Agent(length) for _ in range(population)]\n\n\ndef fitness(agents):\n\n    for agent in agents:\n        agent.fitness = compare_two_lists(agent.string, in_str)\n\n    return agents\n\n\ndef selection(agents):\n\n    agents = sorted(agents, key=lambda agent: agent.fitness, reverse=True)\n    #print ('\\n'.join(map(str, agents)))\n    agents = agents[:int(selector * len(agents))]\n\n    return agents\n\n\ndef crossover(agents):\n\n    offspring = []\n\n    for _ in range((population - len(agents)) // 2):\n\n        parent1 = random.choice(agents)\n        parent2 = random.choice(agents)\n        child1 = Agent(in_str_len)\n        child2 = Agent(in_str_len)\n        split = random.randint(0, in_str_len)\n        child1.string = parent1.string[0:split] + parent2.string[split:in_str_len]\n        child2.string = parent2.string[0:split] + parent1.string[split:in_str_len]\n\n        offspring.append(child1)\n        offspring.append(child2)\n\n    agents.extend(offspring)\n\n    return agents\n\n\ndef mutation(agents):\n\n    for agent in agents:\n        for idx, param in enumerate(agent.string):\n            if random.uniform(0.0, 1.0) <= mutator:\n                if all_apart == 0:\n                    agent.string = agent.string[0:idx] + \\\n                                [(random.choice(data[0]))] + \\\n                                agent.string[idx+1:in_str_len]\n                elif all_apart == 1:\n                    agent.string = agent.string[0:idx] + \\\n                                [[random.uniform(-mutator,mutator)+d for d in param]] + \\\n                                agent.string[idx+1:in_str_len]\n                else:\n                    agent.string = agent.string[0:idx] + \\\n                                [(random.choice(data[0]))] + \\\n                                agent.string[idx+1:in_str_len]\n\n    return agents\n\nif data and pattern:\n    in_str = pattern[0]\n    emax = lambda a,b: a if (a > b) else b\n    emin = lambda a,b: a if (a < b) else b\n    all_max = reduce(emax,[reduce(emax, x) for x in in_str])\n    all_min = reduce(emin,[reduce(emin, x) for x in in_str])\n    all_dif = all_max-all_min\n    print(f'GA initialised with {type(in_str)} {len(in_str)} \\\n            \\n{in_str[:3]}...')\n    in_str_len = len(in_str)\n    combination = [ga()]\n"
      },
      "snlite_ui": [],
      "use_custom_color": true,
      "width": 140.0
    },
    "Socket Converter": {
      "bl_idname": "ConverterNode",
      "color": [
        0.602957010269165,
        0.6740000247955322,
        0.5642769932746887
      ],
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -219.5,
        820.736328125
      ],
      "params": {},
      "use_custom_color": true,
      "width": 140.0
    },
    "Stethoscope MK2": {
      "bl_idname": "SvStethoscopeNodeMK2",
      "color": [
        1.0,
        0.8993440270423889,
        0.9742509722709656
      ],
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -220.91015625,
        657.909423828125
      ],
      "params": {
        "activate": 1,
        "compact": 1,
        "line_width": 106,
        "num_elements": 1,
        "text_color": [
          0.949999988079071,
          0.949999988079071,
          0.949999988079071
        ]
      },
      "use_custom_color": true,
      "width": 140.0
    },
    "Stethoscope MK2.001": {
      "bl_idname": "SvStethoscopeNodeMK2",
      "color": [
        1.0,
        0.8993440270423889,
        0.9742509722709656
      ],
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        984.5301513671875,
        599.4218139648438
      ],
      "params": {
        "compact": 1,
        "line_width": 62,
        "num_elements": 1,
        "selected_mode": "text-based",
        "text_color": [
          0.949999988079071,
          0.949999988079071,
          0.949999988079071
        ]
      },
      "use_custom_color": true,
      "width": 140.0
    },
    "Stethoscope MK2.002": {
      "bl_idname": "SvStethoscopeNodeMK2",
      "color": [
        1.0,
        0.8993440270423889,
        0.9742509722709656
      ],
      "height": 100.0,
      "hide": false,
      "label": "\u0431\u044b\u043b\u043e/\u0441\u0442\u0430\u043b\u043e",
      "location": [
        976.5,
        820.736328125
      ],
      "params": {
        "num_elements": 2,
        "text_color": [
          0.949999988079071,
          0.949999988079071,
          0.949999988079071
        ]
      },
      "use_custom_color": true,
      "width": 140.0
    },
    "Vector in": {
      "bl_idname": "GenVectorsNode",
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -1116.5,
        721.1756744384766
      ],
      "params": {
        "x_": 3.0,
        "y_": 3.0,
        "z_": 3.0
      },
      "width": 100.0
    },
    "Viewer Draw Mk3": {
      "bl_idname": "SvVDExperimental",
      "color": [
        0.6284880042076111,
        0.931007981300354,
        1.0
      ],
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        375.55975341796875,
        1083.6302490234375
      ],
      "params": {
        "activate": 1,
        "display_edges": 1,
        "display_faces": 0,
        "point_size": 8.0,
        "selected_draw_mode": "facet"
      },
      "use_custom_color": true,
      "width": 140.0
    },
    "Viewer Draw Mk3.001": {
      "bl_idname": "SvVDExperimental",
      "color": [
        0.6284880042076111,
        0.931007981300354,
        1.0
      ],
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -522.9977416992188,
        1087.351318359375
      ],
      "params": {
        "display_faces": 0,
        "edge_color": [
          1.0,
          0.19698314368724823,
          0.11354930698871613,
          1.0
        ],
        "use_dashed": 1,
        "vert_color": [
          1.0,
          0.19698314368724823,
          0.11354930698871613,
          1.0
        ]
      },
      "use_custom_color": true,
      "width": 140.0
    },
    "Viewer Draw Mk3.002": {
      "bl_idname": "SvVDExperimental",
      "color": [
        0.6284880042076111,
        0.931007981300354,
        1.0
      ],
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -520.6944580078125,
        523.3268432617188
      ],
      "params": {
        "display_faces": 0,
        "edge_color": [
          0.22871442139148712,
          0.06509549915790558,
          1.0,
          1.0
        ],
        "use_dashed": 1,
        "vert_color": [
          0.22871442139148712,
          0.06509549915790558,
          1.0,
          1.0
        ]
      },
      "use_custom_color": true,
      "width": 140.0
    },
    "Viewer Draw Mk3.003": {
      "bl_idname": "SvVDExperimental",
      "color": [
        0.6284880042076111,
        0.931007981300354,
        1.0
      ],
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        980.475341796875,
        375.14166259765625
      ],
      "params": {
        "activate": 1,
        "display_edges": 1,
        "display_faces": 0,
        "display_verts": 0,
        "edge_color": [
          0.4913524389266968,
          1.0,
          0.8621053695678711,
          1.0
        ],
        "point_size": 8.0,
        "selected_draw_mode": "facet",
        "use_dashed": 1
      },
      "use_custom_color": true,
      "width": 140.0
    },
    "Volume": {
      "bl_idname": "SvVolumeNode",
      "height": 100.0,
      "hide": false,
      "label": "\u043e\u0431\u044a\u0451\u043c \u0431\u044b\u043b",
      "location": [
        378.5,
        820.736328125
      ],
      "params": {},
      "width": 140.0
    },
    "Volume.001": {
      "bl_idname": "SvVolumeNode",
      "height": 100.0,
      "hide": false,
      "label": "\u043e\u0431\u044a\u0451\u043c \u0441\u0442\u0430\u043b",
      "location": [
        378.5,
        693.3173828125
      ],
      "params": {},
      "width": 140.0
    }
  },
  "update_lists": [
    [
      "IcoSphere",
      0,
      "Move.001",
      0
    ],
    [
      "Vector in",
      0,
      "Move.001",
      1
    ],
    [
      "Move.001",
      0,
      "Volume",
      0
    ],
    [
      "IcoSphere",
      2,
      "Volume",
      1
    ],
    [
      "Random Vector MK2",
      0,
      "Move",
      0
    ],
    [
      "Vector in",
      0,
      "Move",
      1
    ],
    [
      "Move.001",
      0,
      "Scripted Node Lite.001",
      0
    ],
    [
      "Move",
      0,
      "Scripted Node Lite.001",
      1
    ],
    [
      "Scripted Node Lite.001",
      0,
      "Socket Converter",
      0
    ],
    [
      "Socket Converter",
      0,
      "Convex Hull",
      0
    ],
    [
      "Convex Hull",
      0,
      "Volume.001",
      0
    ],
    [
      "Convex Hull",
      1,
      "Volume.001",
      1
    ],
    [
      "Volume",
      0,
      "List Join",
      0
    ],
    [
      "Volume.001",
      0,
      "List Join",
      1
    ],
    [
      "Socket Converter",
      0,
      "List Length",
      0
    ],
    [
      "Convex Hull",
      0,
      "Viewer Draw Mk3",
      0
    ],
    [
      "Convex Hull",
      1,
      "Viewer Draw Mk3",
      2
    ],
    [
      "Move",
      0,
      "Viewer Draw Mk3.002",
      0
    ],
    [
      "List Length",
      0,
      "Number Range",
      2
    ],
    [
      "Number Range",
      0,
      "Combinatorics",
      2
    ],
    [
      "Combinatorics",
      0,
      "Stethoscope MK2.001",
      0
    ],
    [
      "Move.001",
      0,
      "Viewer Draw Mk3.001",
      0
    ],
    [
      "IcoSphere",
      1,
      "Viewer Draw Mk3.001",
      1
    ],
    [
      "Socket Converter",
      0,
      "Viewer Draw Mk3.003",
      0
    ],
    [
      "Combinatorics",
      0,
      "Viewer Draw Mk3.003",
      1
    ],
    [
      "List Join",
      0,
      "Stethoscope MK2.002",
      0
    ],
    [
      "Scripted Node Lite.001",
      0,
      "Stethoscope MK2",
      0
    ]
  ]
}